# Move cluster initialization to file 04-init-cluster.sh and update Makefile
# Fix
    ubuntu@worker2:~$ kubectl get pods
    E0428 02:35:03.691188    4600 memcache.go:265] "Unhandled Error" err="couldn't get current server API group list: Get \"http://localhost:8080/api?timeout=32s\": dial tcp [::1]:8080: connect: connection refused"
    The connection to the server localhost:8080 was refused - did you specify the right host or port?
# Add alias "k" and update vimrc
# Add logging
    Example:
        LOG_FILE="./setup.log"

        for node in "${NODES[@]}"; do
          echo "Setting up $node..." | tee -a "$LOG_FILE"

          multipass exec "$node" -- bash -c "
            sudo apt-get update &&
            sudo apt-get install -y curl
          " >> "$LOG_FILE" 2>&1

          echo "Setup for $node done!" | tee -a "$LOG_FILE"
        done

# Make terminal more informative (spinner, status)

# Ideas for further implementation
    1. Multi-Platform Support
        Support for Linux (Debian/Ubuntu, RHEL/CentOS/Fedora).
        Support for Windows via WSL2.
        Native MacOS support.
        Auto-detection of the operating system and environment.

    2. Flexible CNI Selection
        Let the user choose between Flannel, Calico, or Cilium during cluster setup.
        Auto-configure the correct --pod-network-cidr based on the CNI.
        Add options for custom CNI plugin URLs.

    3. Cluster Topology Configuration
        Allow setting the number of master nodes and worker nodes.
        Option for HA (High Availability) cluster setup in the future.
        Flexible node naming (not only master, worker1, worker2).

    4. Automatic Health Checking
        Validate the health of:
            kubelet
            containerd
            kube-apiserver
            kube-controller-manager
            kube-scheduler
            Retry logic for unstable startups.

    5. Reset and Reinstall
        Easy make reset or CLI reset command.
        Full cleanup (remove VMs, reset network settings, clean cluster state).

    6. Easy Upgrades
        Add upgrade scripts to migrate Kubernetes cluster versions.
        Example: Upgrade from v1.32.0 to v1.33.0 automatically.

    7. Cluster Templates
        Predefined templates for typical setups:
        Single-master
        Multi-master
        Development cluster
        Performance testing cluster

    8. Optional Local Registry
        Spin up a local Docker registry inside the cluster for fast image pulls.
        Useful for development environments.

    9. Simple Web UI (Far Future)
        Build a simple lightweight Web UI to:
        Create a cluster
        View node statuses
        Delete cluster
        Use something like Go + basic frontend (React, Svelte, etc.).

    10. Full Go-based CLI
        Rewrite core logic in Go.
        Single binary executable for Linux, MacOS, and Windows.
        No external dependencies (no need to install Go, Python, NodeJS, etc.).